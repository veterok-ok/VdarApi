// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VdarApi.Models;

namespace VdarApi.Migrations
{
    [DbContext(typeof(VdarDbContext))]
    [Migration("20190301140217_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VdarApi.Models.ConfirmationKey", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDateUTC");

                    b.Property<DateTime>("ExpireDateUTC");

                    b.Property<string>("Key")
                        .IsRequired();

                    b.Property<string>("KeyType")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ConfirmationKeys");
                });

            modelBuilder.Entity("VdarApi.Models.Tokens", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken")
                        .IsRequired();

                    b.Property<string>("ClientId")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDateUTC");

                    b.Property<string>("FingerPrint")
                        .IsRequired();

                    b.Property<string>("IP");

                    b.Property<DateTime>("LastRefreshDateUTC");

                    b.Property<string>("Location");

                    b.Property<string>("RefreshToken")
                        .IsRequired();

                    b.Property<string>("UpdateHashSum")
                        .IsRequired();

                    b.Property<string>("UserAgent");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("VdarApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActivatedDateUtc");

                    b.Property<DateTime>("Birthday");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailIsConfirmed");

                    b.Property<string>("FathersName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<bool>("PhoneIsConfirmed");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("SurName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "3391464a-19ad-4983-b169-5ff06e8eb601", ActivatedDateUtc = new DateTime(2019, 2, 15, 13, 18, 5, 439, DateTimeKind.Utc), Birthday = new DateTime(1992, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), CreatedDateUtc = new DateTime(2019, 3, 1, 14, 2, 17, 440, DateTimeKind.Utc), Email = "admin@google.com", EmailIsConfirmed = false, FathersName = "Andreevich", IsActive = true, Login = "vektor", Name = "Viktor", Password = "123", PhoneIsConfirmed = true, PhoneNumber = "7771291221", SurName = "Bochikalov" },
                        new { Id = "7fefa895-0f87-446a-852d-5358052df30f", ActivatedDateUtc = new DateTime(2019, 3, 1, 7, 47, 25, 440, DateTimeKind.Utc), Birthday = new DateTime(1991, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), CreatedDateUtc = new DateTime(2019, 3, 1, 14, 2, 17, 440, DateTimeKind.Utc), Email = "l.kukuyan@mail.ru", EmailIsConfirmed = true, IsActive = true, Login = "lamer", Name = "Levon", Password = "123", PhoneIsConfirmed = false, PhoneNumber = "7771940504", SurName = "Kukuyan" }
                    );
                });
#pragma warning restore 612, 618
        }
    }
}
