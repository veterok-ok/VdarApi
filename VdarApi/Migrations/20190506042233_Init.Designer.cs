// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace VdarApi.Migrations
{
    [DbContext(typeof(VdarDbContext))]
    [Migration("20190506042233_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities","Info");

                    b.HasData(
                        new { CityId = 1, CountryId = 1, Name = "Алматы" },
                        new { CityId = 2, CountryId = 1, Name = "Нур-Султан" },
                        new { CityId = 3, CountryId = 1, Name = "Караганда" },
                        new { CityId = 4, CountryId = 1, Name = "Кызылорда" },
                        new { CityId = 5, CountryId = 1, Name = "Тараз" },
                        new { CityId = 6, CountryId = 1, Name = "Семипалатинск" },
                        new { CityId = 7, CountryId = 1, Name = "Павлодар" }
                    );
                });

            modelBuilder.Entity("Entities.Models.ConfirmationKey", b =>
                {
                    b.Property<int>("ConfirmationKeyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateUTC");

                    b.Property<DateTime>("ExpireDateUTC");

                    b.Property<string>("HashCode");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("KeyType")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("UserId");

                    b.HasKey("ConfirmationKeyId");

                    b.HasIndex("UserId");

                    b.ToTable("ConfirmationKeys","Identity");
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("CountryId");

                    b.ToTable("Countries","Info");

                    b.HasData(
                        new { CountryId = 1, Name = "Казахстан" }
                    );
                });

            modelBuilder.Entity("Entities.Models.Token", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDateUTC");

                    b.Property<string>("FingerPrint")
                        .IsRequired();

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastRefreshDateUTC");

                    b.Property<string>("Location");

                    b.Property<string>("RefreshToken")
                        .IsRequired();

                    b.Property<string>("UpdateHashSum")
                        .IsRequired();

                    b.Property<string>("UserAgent");

                    b.Property<int>("UserId");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens","Identity");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActivatedDateUtc");

                    b.Property<DateTime?>("Birthday");

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Email")
                        .HasMaxLength(320);

                    b.Property<bool>("EmailIsConfirmed");

                    b.Property<bool>("EmailIsSubscribe");

                    b.Property<string>("EmailKeyUnSubscribe");

                    b.Property<string>("FathersName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Login")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("PhoneIsConfirmed");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Salt")
                        .HasMaxLength(50);

                    b.Property<string>("SurName")
                        .HasMaxLength(250);

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.ToTable("Users","Identity");

                    b.HasData(
                        new { UserId = 1, ActivatedDateUtc = new DateTime(2019, 4, 22, 3, 38, 21, 745, DateTimeKind.Utc), Birthday = new DateTime(1992, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, CreatedDateUtc = new DateTime(2019, 5, 6, 4, 22, 33, 746, DateTimeKind.Utc), Email = "admin@google.com", EmailIsConfirmed = false, EmailIsSubscribe = false, FathersName = "Andreevich", IsActive = true, Login = "vektor", Name = "Viktor", Password = "fg8qDdjIpPvQVV08hbkIRuwJc3R0D2dhZx+b/iRqR8E=", PhoneIsConfirmed = true, PhoneNumber = "7771291221", Salt = "vJCU14107jiT3prqEL0qdw==", SurName = "Bochikalov" },
                        new { UserId = 2, CityId = 1, CreatedDateUtc = new DateTime(2019, 5, 6, 4, 22, 33, 748, DateTimeKind.Utc), EmailIsConfirmed = false, EmailIsSubscribe = false, IsActive = true, Name = "Levon", Password = "dgzIK7OA/2BAnSawv4pFrecYrs/NCuq5QXZIdXXoI0M=", PhoneIsConfirmed = false, PhoneNumber = "7771940504", Salt = "lkK0bFCH71jxCEAeWYHljg==", SurName = "Kukuyan" }
                    );
                });

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.HasOne("Entities.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.ConfirmationKey", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("ConfirmationKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.Token", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });
#pragma warning restore 612, 618
        }
    }
}
